spring:
  application:
    name: chat-ai-agent
  profiles:
    active: local
  ai:
    dashscope:
      # 请在 application-local.yml 中配置你的 API key
      api-key: your-dashscope-api-key-here
      chat:
        options:
          model: qwen-plus
      chat-vl:
        options:
          model: qwen-vl-plus-latest
#          model: qwen3-vl-plus-2025-09-23
      # DeepSeek 模型配置
      deepseek:
        options:
          model: deepseek-v3.2-exp
      routing-chat-model:
        options:
          model: qwen-turbo
          max-tokens: 1000
#    ollama:
#      base-url: http://localhost:11434
#      chat:
#        model: gemma3:1b
    # MCP 服务配置（可选，需要启动 MCP 服务）
    mcp:
      client:
        stdio:
          servers-configuration: classpath:mcp-servers.json

    # 向量数据库配置（可选，需要启动 PgVector 数据库）
#    vectorstore:
#      pgvector:
#        index-type: HNSW
#        dimensions: 1536
#        distance-type: COSINE_DISTANCE
#        max-document-batch-size: 10000
  data:
    redis:
      host: 127.0.0.1
      port: 6379
  # 如需密码请在 application-local.yml 中配置

  # 文件上传配置
  servlet:
    multipart:
      enabled: true
      max-file-size: 5MB
      max-request-size: 5MB
      file-size-threshold: 0

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ggy_picture
    username: root
    # 请在 application-local.yml 中配置数据库密码
    password: your-database-password-here
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
# 高德的 apikey
GAODE_API_KEY: your-dashscope-api-key-here
# MyBatis-Flex 配置
mybatis-flex:
  mapper-locations: classpath*:/mapper/*.xml
  type-aliases-package: cn.chat.ggy.chataiagent.entity
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
    # 开启SQL日志
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

server:
  port: 8123
  servlet:
    context-path: /api
  # Tomcat 文件上传配置
  tomcat:
    max-swallow-size: -1
    max-http-form-post-size: 5MB

# 应用配置
app:
  base-url: http://localhost:8123

# Search API 配置
search-api:
  # 请在 application-local.yml 中配置你的 Search API Key
  api-key: your-search-api-key-here

# SpringDoc OpenAPI 配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: cn.chat.ggy.chataiagent.controller

# Knife4j 配置
knife4j:
  enable: true
  setting:
    language: zh_cn

# 日志配置
logging:
  level:
    org.springframework.ai: INFO
    # MCP 客户端日志 (Spring AI 1.1.0-M2)
    org.springframework.ai.mcp: DEBUG
    org.springframework.ai.mcp.client: DEBUG
    org.springframework.ai.mcp.sse: DEBUG
    # HTTP 客户端日志（用于调试SSE连接）
    org.springframework.web.reactive.function.client: DEBUG
    reactor.netty.http.client: DEBUG
    # Spring AI 1.1.0-M2 新增功能日志
    org.springframework.ai.tool: DEBUG
    org.springframework.ai.function: DEBUG
    root: INFO
    # MyBatis SQL 日志
    com.mybatisflex.core.audit.ConsoleMessageCollector: DEBUG
    com.mybatisflex.core.audit.MessageCollector: DEBUG
    # MyBatis 框架日志
    org.apache.ibatis: DEBUG
    # 您的 mapper 包日志（输出具体 SQL）
    cn.chat.ggy.chataiagent.mapper: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/ggy-ai-agent.log